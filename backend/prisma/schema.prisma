// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rol{
  A
  C
}

model Usuarios{
  id Int @id @default(autoincrement()) 
  nombre_completo String 
  email String 
  contrasenia String 
  rol Rol 
  activa Boolean @default(true)
  createdAt DateTime @default(now())
  asientos Asiento[]  @relation("UsuarioCreador")
}

enum TipoCuenta {
  ACTIVO
  PASIVO
  PATRIMONIO
  RESULTADO_POSITIVO
  RESULTADO_NEGATIVO
}


model Cuenta{
  id Int @id @default(autoincrement())
  codigo String @unique 
  nombre String
  padreId Int?
  padre Cuenta? @relation("CuentaHijos", fields: [padreId], references: [id])
  hijos Cuenta[] @relation("CuentaHijos")
  imputable Boolean @default(false)
  activa Boolean @default(true)
  tipo TipoCuenta 
  saldo Float @default(0.0)
  recibeSaldo Boolean @default(true)
  createdAt DateTime @default(now())
  lineaAsientos LineaAsiento[] @relation("CuentaUsada")
}

model Asiento{
   id          Int       @id @default(autoincrement())
  fecha       DateTime 
  descripcion String
  usuarioId   Int
  usuario     Usuarios   @relation("UsuarioCreador",fields: [usuarioId], references: [id])
  lineas      LineaAsiento[]
  creadoEn    DateTime  @default(now())
}

model LineaAsiento{
    id        Int      @id @default(autoincrement())
  asientoId Int
  asiento   Asiento  @relation(fields: [asientoId], references: [id])
  cuentaId  Int
  cuenta    Cuenta   @relation("CuentaUsada",fields: [cuentaId], references: [id])
  debe      Float?   
  haber     Float?   
}
